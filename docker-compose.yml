version: '3.8'

services:
  event-service:
    build:
      context: ./event-service
    ports:
      - '3001:3001'  # Module de gestion des événements
    depends_on:
      - mongo  # Dépend de la base de données MongoDB
    networks:
      - app-network
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:3001/health' ]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ./user-service
    ports:
      - '3002:3002'  # Module de gestion des utilisateurs
    depends_on:
      - mongo  # Dépend de la base de données MongoDB
    networks:
      - app-network
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:3002/health' ]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    build:
      context: ./payment-service
    ports:
      - '3003:3003'  # Module de gestion des paiements
    depends_on:
      - mongo  # Dépend de la base de données MongoDB
    networks:
      - app-network
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:3003/health' ]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./notification-service
    ports:
      - '3004:3004'  # Module de gestion des notifications
    networks:
      - app-network
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:3004/health' ]
      interval: 30s
      timeout: 10s
      retries: 3

  mongo:
    image: mongo:latest  # Image Docker pour MongoDB
    volumes:
      - mongo-data:/data/db  # Stockage persistant pour les données MongoDB
    networks:
      - app-network

volumes:
  mongo-data:  # Volume pour le stockage des données MongoDB

networks:
  app-network:  # Réseau pour la communication entre les services